help(histogram)
help(hist)
library(dismo)
library(rgeos) # and their dependencies
library(sp)  # classes for spatial data
install.packages(sp)
install.packages(raster)
install.packages(rasterVis)
library(sp)             # classes for spatial data
library(raster)         # grids, rasters
library(rasterVis)      # raster visualisation
library(maptools)
# and their dependencies
install.packages(sp)             # classes for spatial data
install.packages("sp")             # classes for spatial data
install.packages("sp")  # classes for spatial data
install.packages("raster")  # grids, rasters
install.packages("rasterVis")  # raster visualisation
install.packages("maptools")
install.packages("rgeos") # and their dependencies
install.packages("dismo")
require("sp")  # classes for spatial data
require("raster")  # grids, rasters
require("rasterVis")  # raster visualisation
require("maptools")
require("rgeos") # and their dependencies
require("dismo")
```{r}
mymap <- gmap("France")  # choose whatever country
plot(mymap)
```
require("sp")  # classes for spatial data
require("raster")  # grids, rasters
require("rasterVis")  # raster visualisation
require("maptools")
require("rgeos") # and their dependencies
require("dismo")
```
```{r}
mymap <- gmap("France")  # choose whatever country
plot(mymap)
```
#?spatial_sync_raster
#?spatial_sync_raster
library(climstats) #?spatial_sync_raster
install.packages("climstats") #?spatial_sync_raster
install.packages("googleVis")
require("climstats")
require("googleVis")
?spatial_sync_raster
intsall.packages("RgoogleMaps")
install.packages("RgoogleMaps")
require("climstats") # climstats appears to not be available
install.packages("climstats") # climstats appears to not be available
install.packages("installr")
Ponds <- read.table(file="BrownCoData/20130801_PondDataMod.csv", head=TRUE, sep=",")
OTUs <- read.csv(file="BrownCoData/SiteBySpecies.csv", head=TRUE, sep=",")
OTUs <- as.data.frame(OTUs[-1]) # remove first column (site names)
require("vegan")
sar.area <- c()
sar.richness <- c()
pond.areas <- as.vector(pi * (Ponds$Diameter/2)^2)
for (i in 1:51) {
# Loop through all values of sample size from 1 to 51 (cuz there's 51 ponds)
pond.sample <- sample(51, replace = FALSE, size = i)
# draw a random sample of i numbers, w/out replacement
area <- 0 # a variable to hold the accumulating area, resulting from
# aggregating ponds, i.e., sites
cum.abs <- vector(mode="numeric", length=length(OTUs))
# a vector to hold the accumulating abundances among OTUs, resulting from
# aggregating ponds, i.e., sites
for (j in pond.sample) { # Loop through each randomly drawn pond
area <- area + pond.areas[j] # aggregating area, (incrementing)
cum.abs <- cum.abs + as.numeric(OTUs[j, ])
# accumulating abundances of OTUs, one site at a time
} # End random pond samples loop
# At this point we have 1.) area and 2.) vector of abundances
# What we need is 1.) area and 2.) richness
S1 <- length(cum.abs[cum.abs > 0])
S2 <- specnumber(cum.abs) # using vegan to make sure we have the right S
print(c(i, area, S1, S2))
sar.area <- c(sar.area, area)
sar.richness <- c(sar.richness, S1)
}
for (i in 1:51) { # Loop through each SAR data point ...yes and no. Because we're using
# non-nested approach, two ponds could have less combined area and less richness than three ponds.
pond.sample <- sample(51, size = i) # you need the argument replace=FALSE
area = 0 # use '<-'
richness = 0 # use '<-'
otu = data.frame() # use '<-'
for (j in pond.sample) { # Loop through each random pond in the sample
area = area + Ponds$Area[j] # OK
otu = rbind(otu, OTUs[j, ]) # ehhh...this eats up time
} # End random pond samples loop   ...see above code
pond.sar$Area[i] = area
# BELOW. You've got the right idea, but there's a simpler, short, faster way (see above code)
spec.sums = as.vector(colSums(otu)) # sum species abundances for all ponds in one vector
for (k in spec.sums) { # Loop through each vector element
if (k > 0) {
richness = richness + 1
}
}
pond.sar$Richness[i] = richness
} # End SAR data points loop
Ponds <- read.table(file="BrownCoData/20130801_PondDataMod.csv", head=TRUE, sep=",")
OTUs <- read.csv(file="BrownCoData/SiteBySpecies.csv", head=TRUE, sep=",")
OTUs <- as.data.frame(OTUs[-1]) # remove first column (site names)
require("vegan")
sar.area <- c()
sar.richness <- c()
pond.areas <- as.vector(pi * (Ponds$Diameter/2)^2)
for (i in 1:51) {
# Loop through all values of sample size from 1 to 51 (cuz there's 51 ponds)
pond.sample <- sample(51, replace = FALSE, size = i)
# draw a random sample of i numbers, w/out replacement
area <- 0 # a variable to hold the accumulating area, resulting from
# aggregating ponds, i.e., sites
cum.abs <- vector(mode="numeric", length=length(OTUs))
# a vector to hold the accumulating abundances among OTUs, resulting from
# aggregating ponds, i.e., sites
for (j in pond.sample) { # Loop through each randomly drawn pond
area <- area + pond.areas[j] # aggregating area, (incrementing)
cum.abs <- cum.abs + as.numeric(OTUs[j, ])
# accumulating abundances of OTUs, one site at a time
} # End random pond samples loop
# At this point we have 1.) area and 2.) vector of abundances
# What we need is 1.) area and 2.) richness
S1 <- length(cum.abs[cum.abs > 0])
S2 <- specnumber(cum.abs) # using vegan to make sure we have the right S
print(c(i, area, S1, S2))
sar.area <- c(sar.area, area)
sar.richness <- c(sar.richness, S1)
}
Ponds <- read.table(file="BrownCoData/20130801_PondDataMod.csv", head=TRUE, sep=",")
OTUs <- read.csv(file="BrownCoData/SiteBySpecies.csv", head=TRUE, sep=",")
OTUs <- as.data.frame(OTUs[-1]) # remove first column (site names)
require("vegan")
sar.area <- c()
sar.richness <- c()
pond.areas <- as.vector(pi * (Ponds$Diameter/2)^2)
Ponds <- read.table(file="BrownCoData/20130801_PondDataMod.csv", head=TRUE, sep=",")
Y <- c(1,0,1)
Y[Y>0] <- 1
Y
Y[Y > 0] <- 1
Y
Y <- c(2, 0, 2)
Y[Y > 0] <- 1
Y
B <- NULL
B
help(cor.test.default)
# SETUP
# Retrieve and Set Your Working Directory
rm(list=ls())
getwd()
setwd("~/GitHub/Dimensions/Aim3")
# Load Packages
require("sp")          # Classes and methods for handling spatial data
require("geoR")        # Methods for geostatistical analyses
require("rgdal")       # Geospatial Data Abstraction Library
require("raster")      # Methods to create a RasterLayer object
require("maptools")    # Tools for manipulating and reading geospatial data
require("picante")
require("ape")
require("seqinr")
require("vegan") # biodiversity estimators and related functions
require("fossil")
require("simba")
# Load source file that includes a function for reading in the output files from the community sequencing software `mothur` (http://www.mothur.org/).
source("./bin/MothurTools.R")
# Load Environmental and Geographical Data
env <- read.table("DATA/CurrentData/20130801_PondDataMod.csv", sep = ",", header = TRUE)
lats <- as.numeric(env[, 3]) # latitudes (north and south)
lons <- as.numeric(env[, 4]) # longitudes (east and west)
comm <- read.otu(shared = "./DATA/CurrentData/INPonds.final.rdp.shared", cutoff = "1")
View(comm)
help(nti)
