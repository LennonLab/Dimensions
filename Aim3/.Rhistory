```{r, results = 'hide'}
rm(list=ls())
getwd()
setwd("~/GitHub/Dimensions/Aim3")
require("BiodiversityR")
require("vegan")
require("sp")  # classes for spatial data
require("raster")  # grids, rasters
require("rasterVis")  # raster visualisation
require("maptools")
require("rgeos") # and their dependencies
require("dismo")
require("RgoogleMaps") # overlays of data onto a Google map.
require("googleVis")
```
## 2.) Mapping
### Map sample ponds onto Google map
Retrieve base maps from Google with the `gmap` function in Species distribution modeling package `dismo`.
```{r}
# Map centered on Brown County
newmap <- GetMap(center = c(39.1,-86.3), zoom = 8, destfile = "BrownComap.png", maptype="terrain")
PlotOnStaticMap(newmap, zoom = 8, cex = 2, col='blue')
Ponds <- read.table(file="BrownCoData/20130801_PondData.csv", head=TRUE, sep=",")
lats <- Ponds[, 3]
lons <- Ponds[, 4]
PlotOnStaticMap(newmap, lats, lons, zoom=8, cex=1.5, col='red', add = FALSE)
```
### Plot sample ponds on web-page to search, scroll, magnify
```{r}
names <- Ponds[, 1]
latlongs <- transform(names, latlongs = interaction(lats, lons, sep=':'))
M1 <- gvisMap(latlongs, "latlongs", "X_data", options = list(showTip=TRUE, showLine=TRUE, enableScrollWheel=TRUE, mapType='satellite', useMapTypeControl=TRUE, width=800,height=600))
plot(M1)
EnvData <- Ponds[5:21]
Temp <- EnvData[6]
```
### A function for calculating OTU richness
```{r}
OTU.obs <- function(x = ""){
rowSums(x > 0) * 1
}
```
### Generate data object for S and N of dormant and active across samples
```{r}
# Active
Active <- read.csv(file="BrownCoData/active.csv", head=TRUE, sep=",")
Active <- Active[-1] # remove first column (names)
Active.S <- as.matrix(OTU.obs(Active))
Active.N <- as.matrix(rowSums(Active)) # no. reads
# Dormant
Dormant <- read.csv(file="BrownCoData/dormant.csv", head=TRUE, sep=",")
Dormant <- Dormant[-1] # remove first column (names)
Dormant.S <- as.matrix(OTU.obs(Dormant))
Dormant.N <- as.matrix(rowSums(Dormant)) # no. reads
```
### Scatter plots and correlation of sample-based N and S
Because regardless of what they mean, Ken is always thinking about N and S.
```{r}
A.dem <- cbind(Active.S, Active.N)
labels <- c('richness', 'abundance')
pairs(A.dem, labels)
cor <- cor(A.dem)
cor
mydata <- as.data.frame(Active.N)
fit <- lm(Active.S ~ Active.N, data=mydata)
summary(fit)
Ddem <- cbind(Dormant.S, Dormant.N)
labels <- c('richness', 'abundance')
pairs(Ddem, labels)
cor <- cor(Ddem)
cor
mydata <- as.data.frame(Dormant.N)
fit <- lm(Dormant.S ~ Dormant.N, data=mydata)
summary(fit)
AvD.S <- cbind(Active.S, Dormant.S)
labels <- c('Active.S', 'Dormant.S')
pairs(AvD.S, labels)
cor <- cor(AvD.S)
cor
AvD.N <- cbind(Active.N, Dormant.N)
labels <- c('Active.N', 'Dormant.N')
pairs(AvD.N, labels)
cor <- cor(AvD.N)
cor
```
### Simple sample demographics vs. Environmental variables
```{r}
# Dormant richness vs. Temp
SvTemp <- cbind(Dormant.S, Temp)
labels <- c('Dormant.S', 'Temp')
pairs(SvTemp, labels)
cor <- cor(SvTemp)
cor
mydata <- as.data.frame(Temp)
fit <- lm(Dormant.S ~ Temp, data=mydata)
summary(fit) # kinda sorta
# Active richness vs. Temp
SvTemp <- cbind(Active.S, Temp)
labels <- c('Active.S', 'Temp')
pairs(SvTemp, labels)
cor <- cor(SvTemp)
cor
mydata <- as.data.frame(Temp)
fit <- lm(Active.S ~ Temp, data=mydata)
summary(fit) # wonk wonk
```
### Messing around with Temperature, Salinity, and Temporo-mandibular Syndrome (TDS)
```{r}
fit <- lm(Dormant.S ~ Temp, data= EnvData)
summary(fit)
fit <- lm(Active.S ~ Salinity + TDS, data= EnvData)
summary(fit)
```
## 4.) alpha-Diversity
### Evenness
```{r}
```
### Diversity
```{r}
```
### Local richness Estimation
A function using vegan's `estimateR` function
```{r}
S.est <- function(x = ""){
est <- estimateR(x)
chao1 <- est[2]
ace <- est[4]
return(chao1)
}
```
Plotting kernel density curves for estimated Richness
```{r}
par(mfrow=c(1, 2))
Active.S.est <- apply(Active, 1, S.est)
Dormant.S.est <- apply(Dormant, 1, S.est)
ASx <- density(Active.S.est)
DSx <- density(Dormant.S.est)
plot(ASx, main = "Est. Richness Active, Chao1", col = 'DarkCyan')
plot(DSx, main = "Est. Richness Dormant, Chao1", col = 'magenta')
```
### Coverage
A functions for coverage (C)
```{r}
# Good's Coverage == Bad Logic
Goods <- function(x = ""){
1.0 - (sum(x == 1) / sum(x))
}
```
Plotting kernel density curves for coverage
```{r}
par(mfrow=c(1, 2))
Active.C <- apply(Active, 1, Goods)
summary(Active.C)
Ax <- density(Active.C)
Dormant.C <- apply(Dormant, 1, Goods)
summary(Dormant.C)
Dx <- density(Dormant.C)
plot(Ax, main = "Good's C for Active", col = 'DarkCyan')
plot(Dx, main = "Good's C for Dormant", col = 'magenta')
```
### Rarefaction
Plotting rarefaction curves for each site's Active and Dormant
```{r}
par(mfrow=c(1,2))
min.N <- min(rowSums(Active))
S.rarefy <- rarefy(x = Active, sample = min.N, se = TRUE)
Active.gamma <- specpool(Active)
Active.gamma <- specpool(Active)
Active.gamma
Dormant.gamma <- specpool(Dormant)
Dormant.gamma
