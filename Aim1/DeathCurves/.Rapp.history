library(glmtools)
quit()
library(Rgtk2)
library(RGtk2)
remove.packages(RGtk2)
remove.packages('RGtk2')
library("RGtk2")
remove.packages('RGtk2')
(1.6-1)/1
(1.6543-1.0423)/1.0423
15*40*50
15*40*25
15*40*25*1.48
x=seq(1,200)
1/0.69
1/.13
15872*(55000/(9728+55000))
15872*(55000/(9728+55000))+55000
(10250+388)/68486.59
(10250+388)/68486.59*12
10250+388
10250+388*6
10638*6
10250+388
10638*2
15872*(55000/(55000+9728))
13486.59+55000
21276/68486.59
1864.39+357.76
p=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)
Ap=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)
Vp
Ve
Ve*0.2
##### Simplest CH4 ecosystem model#
##### 11-5-14#
##### WEW & SEJ#
#
rm(list=ls())#
#
library(deSolve)#
#
# set up ordinary differential equations (ODEs) in function for deSolve to use for each time step#
#
# State variables:#
#		1. CH4 in profundal sediment#
#		2. CH4 in littoral sediment#
#		3. CH4 in epilimnion#
#
# Daily time step#
#
timeStepCH4<-function(times,y,params){#
	with(as.list(params){#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
	})#
}#
#
# Parameters#
Ap=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)#
#
init=c(0.2*Vp,0.2*Vl,0.2*Ve)		#starting all the same (sort of like after mixis); 200 uM#
t.s=1:180#
#
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
timeStepCH4<-function(times,y,params){#
	with(as.list(params){#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
	)}#
}
timeStepCH4<-function(times,y,params){#
	with(as.list(params){#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
	})#
}
timeStepCH4<-function(times,y,params){#
	with(as.list(params),{#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
	})#
}
rm(list=ls())#
#
library(deSolve)#
#
# set up ordinary differential equations (ODEs) in function for deSolve to use for each time step#
#
# State variables:#
#		1. CH4 in profundal sediment#
#		2. CH4 in littoral sediment#
#		3. CH4 in epilimnion#
#
# Daily time step#
#
timeStepCH4<-function(times,y,params){#
	with(as.list(params),{#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
	})#
}
Ap=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)#
#
init=c(0.2*Vp,0.2*Vl,0.2*Ve)		#starting all the same (sort of like after mixis); 200 uM#
t.s=1:180#
#
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris
out=ode(y=init,times=t.s,func=timeSt,parms=params)
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris #
atmCH4=0.1	# [mol CH4 m-3]
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris --> Stuart will remember how to do this dynamically#
atmCH4=0.1	# [mol CH4 m-3]Will thinks this is about right --> We can check this and use whatever the global average is
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
dPdt=5
dLdt=2
dEdt=1
list(dPdt,dLdt,dEdt)
timeStepCH4<-function(times,y,params){#
	with(as.list(params),{#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
		return(list(dP.dt,dL.dt,dE.dt))#
	})#
}
# Parameters#
Ap=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)#
#
init=c(0.2*Vp,0.2*Vl,0.2*Ve)		#starting all the same (sort of like after mixis); 200 uM#
t.s=1:180#
#
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris --> Stuart will remember how to do this dynamically#
atmCH4=0.1	# [mol CH4 m-3]Will thinks this is about right --> We can check this and use whatever the global average is
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
init=c(0.2*Vp,0.2*Vl,0.2*Ve)
length(init)
timeStepCH4<-function(times,y,params){#
	with(as.list(params),{#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
		return(as.list(c(dP.dt,dL.dt,dE.dt)))#
	})#
}
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
timeStepCH4<-function(times,y,params){#
	with(as.list(params),{#
		P=y[1]	# CH4 in profundal sediment#
		L=y[2]	# CH4 in littoral sediment#
		E=y[3]	# CH4 in epilimnion#
		#dPdt=production-diffusion; assuming no ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(???)#
		dP.dt=Ap*(GPP*zmix*sed*yield-Pdiff*(P/Vp-E/Ve))#
		#dLdt=production-diffusion-ebullition#
		#		production=f(GPP,settling,yield)#
		#		diffusion=f(E,L,???)#
		#		ebullition=f(L,???)#
		dL.dt=Al*(GPP*zmix*sed*yield-Ldiff*(L/Vl-E/Ve))-ebull*L#
		#dEdt=production+diffusion (littoral and profundal)-atm. diffusion-oxidation#
		#		production=f(GPP)????#
		#		diffusion=f(E,L,P,???)#
		#		atm. diffusion=f(E,atm)#
		#		oxidation=f(E)#
		dE.dt=GPP*Eprod*Ve+Pdiff*(P/Vp-E/Ve)*Ap+Ldiff*(L/Vl-E/Ve)*Al-k*(E/Ve-atmCH4)*Ae-oxE*E#
		list(c(dP.dt,dL.dt,dE.dt))#
	})#
}
Ap=1250		# Area of profundal sediments; [m2]#
Al=250		# Area of littoral sediments; [m2]#
Ae=Ap+Al		# Surface area of lake; [m2]#
activeLayerDepth=0.2	# Active layer depth of sediments; [m]#
Vp=Ap*activeLayerDepth		# Volume of "active" profundal sediments; [m3]#
Vl=Al*activeLayerDepth		# Volume of "active" littoral sediments; [m3]#
zmix=2	# Mixed layer depth of lake; [m]#
Ve=Ae*zmix		# Volume of epilimnion; [m3]#
sed=0.3		# Proportion of areal GPP that settles to sediments; []#
yield=0.25	# Molar yield of CH4 from algal C; [mol CH4 (mol algal C)-1]#
Pdiff=0.001	# Mass transfer coefficient/diffusivity???; [m d-1]#
Ldiff=0.005	# Mass transfer coefficient/diffusivity???; [m d-1]#
ebull=0.1		# Fraction of production released as ebullition [d-1] -> could be a more complex function that causes ebullition at a critical saturating concentration; could also be probabalistic#
Eprod=0.0001	# Epilimnetic CH4 production per unit GPP; [mol CH4 (mol C)-1]#
k=0.4	# Piston velocity; [m d-1]#
oxE=0.9	# Fraction of epilimnion CH4 lost to oxidation; [d-1]#
params=c(Vp=Vp,Vl=Vl,Ve=Ve,Ap=Ap,Al=Al,Ae=Ae,zmix=zmix,sed=sed,yield=yield,Pdiff=Pdiff,Ldiff=Ldiff,ebull=ebull,Eprod=Eprod,k,oxE)
init=c(0.2*Vp,0.2*Vl,0.2*Ve)		#starting all the same (sort of like after mixis); 200 uM#
t.s=1:180#
#
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris --> Stuart will remember how to do this dynamically#
atmCH4=0.1	# [mol CH4 m-3]Will thinks this is about right --> We can check this and use whatever the global average is#
#
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
dim(out)
head(out)
init=c(P=0.2*Vp,L=0.2*Vl,E=0.2*Ve)		#starting all the same (sort of like after mixis); 200 uM#
t.s=1:180#
#
GPP=0.1		# [mol C m-3 d-1]Jake says this is average for morris --> Stuart will remember how to do this dynamically#
atmCH4=0.1	# [mol CH4 m-3]Will thinks this is about right --> We can check this and use whatever the global average is#
#
out=ode(y=init,times=t.s,func=timeStepCH4,parms=params)
head(out)
dev.new()#
par(mfrow=c(3,1))#
plot(out[,1],out[,2],type='l',lwd=2,xlab="Time",ylab="Profundal CH4")#
plot(out[,1],out[,3],type='l',lwd=2,xlab="Time",ylab="Littoral CH4",col='red')#
plot(out[,1],out[,4],type='l',lwd=2,xlab="Time",ylab="Epilimnion CH4",col='green')
dim(out)
out[180,]
65.366/Ve
65.366/Ve*1000
DecayVector <- c(0.05,0.12,0.14,0.05,0.06,0.09,0.05,0.14,0.15)#
TempVector <- c(5,20,35,5,20,35,5,20,35)#
UVBVector <- c(2,25,50,25,2,2,50,50,25)#
StricklerFig4pH10 <- data.frame(Decay=DecayVector, Temp=TempVector, UVB=UVBVector)#
#
# Fit the model (including all interactions) using lm#
model=lm(Decay~Temp*UVB,StricklerFig4pH10)#
summary(model) #
par(mfrow=c(2,2)) #
plot(model)
DecayVector <- c(0.05,0.12,0.14,0.05,0.06,0.09,0.05,0.14,0.15)#
TempVector <- c(5,20,35,5,20,35,5,20,35)#
UVBVector <- c(2,25,50,25,2,2,50,50,25)#
StricklerFig4pH10 <- data.frame(Decay=DecayVector, Temp=TempVector, UVB=UVBVector)#
#
# Fit the model (including all interactions) using lm#
model=lm(Decay~Temp+UVB,StricklerFig4pH10)#
summary(model) #
par(mfrow=c(2,2)) #
plot(model)
DecayVector <- c(0.05,0.12,0.14,0.05,0.06,0.09,0.05,0.14,0.15)#
TempVector <- c(5,20,35,5,20,35,5,20,35)#
UVBVector <- c(2,25,50,25,2,2,50,50,25)#
StricklerFig4pH10 <- data.frame(Decay=DecayVector, Temp=TempVector, UVB=UVBVector)#
#
# Fit the model (including all interactions) using lm#
model=lm(Decay~Temp,StricklerFig4pH10)#
summary(model) #
par(mfrow=c(2,2)) #
plot(model)
exp(2)
x=5
y=2
z=matrix(NA,10,10)
ls9)
ls()
str(ls())
str(x)
str(y)
str(z)
students=c(#
"Amanda",#
"Maggie",#
"Martha",#
"Margaret",#
"Meredith",#
"Brandon",#
"Julia",#
"Pete",#
"Lainey",#
"Michael",#
"Toby"#
)
length(students)
sample(students,length(students),replace=FALSE)
file.choose()
choose.file()
?sum
?c
v=c(1,2,3,20)
v
v=1:4
v
rm(list=ls())
1:4
v
v=1:4
v
v=seq(from=2,to=24,by=2)
v
?seq
b=seq(to=4)
b
b=seq(from=4)
b
rep(2,5)
v
length(v)
max(v)
min(v)
range(v)
rangeofv=range(v)
length(rangeofv)
length(range(v))
v
v>6
A=matrix(0,nrow=2,ncol=2)
A
A=matrix(1:4,nrow=2,ncol=2)
A
dim(A)
nrow(A)
length(A)
t(A)
a=list(name="walleye",length=225,tagged=TRUE)
a
a$name
a$length
names=c("walleye","perch")
weight=c(270,57)
d=data.frame(names=names,weight=weigth,stringsAsFactors=FALSE)
d=data.frame(names=names,weight=weight,stringsAsFactors=FALSE)
d
d[1,1]
d[,1]
d$names
students=c(#
"Amanda",#
"Maggie",#
"Martha",#
"Meg",#
"Meredith",#
"Brandon",#
"Julia",#
"Peter",#
"Lainey",#
"Mike",#
"Toby"#
)#
#
sample(students,length(students),replace=FALSE)
t=1:180#
#
a=0.5#
b=1#
c=-0.5
plot(t,a+b*exp(c),type='l')
plot(t,a+b*exp(c*t),type='l')
?glm
?guassian
?gaussian
?glm
?gaussian
getwd()
setwd("../DeathCurves/")
getwd()
setwd("/Users/stuartjones/Documents/Research/DimensionsBiodiversity/Dimensions/Aim1/DeathCurves")
obs <- read.csv("longtermdormancy_20150425.csv", header = TRUE, stringsAsFactors = FALSE)
obs$Abund <- as.numeric(obs$Colonies) * 10 ^ as.numeric(obs$Dilution) + 1
library(deSolve)
